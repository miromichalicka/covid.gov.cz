{"version":3,"sources":["webpack:///./src/components/button/variants.module.scss","webpack:///./src/components/headline/headline.tsx","webpack:///./src/components/list-card/list-card.tsx","webpack:///./src/templates/situations/list.tsx","webpack:///./src/components/breadcrumb/breadcrumb.tsx","webpack:///./src/components/headline/headline.module.scss","webpack:///./src/components/breadcrumb/breadcrumb.module.scss","webpack:///./src/components/button/button.tsx"],"names":["module","exports","children","className","styles","headline","title","description","link","to","text","I18n","variant","query","area","data","items","url","id","meta_description","path","key","alias","getBreadcrumbClasses","classNames","classes","getItemClasses","index","aria-label","item","isNavItem","label","getClass","btn","onClick","href","disabled","icon","linkTitle","type","data-testid"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,kBAAkB,0CAA0C,cAAgB,4C,oHCO9F,EAJ2B,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SAC5B,OAAO,wBAAIC,UAAWC,IAAOC,UAA7B,K,oKCoBF,EAdmC,SAAC,GAAD,IAAGC,EAAH,QAAUC,EAAV,cAAuBC,EAAvB,cACjC,yBAAKL,UAAU,iBACb,wBAAIA,UAAU,2BADhB,GAEE,yBAAKA,UAAU,kDACb,uBAAGA,UAAU,OADf,GAEE,6BACE,uBAAMM,GAAID,GACR,uBAAQE,KAAMC,YAAd,UAA8BC,QAAQ,iB,wBCqCnCC,GAFb,UAvC+B,SAAC,GAAa,QACnCC,EADmC,EAAXC,KAAW,KAE3C,OACE,2BACE,2BACE,yBAAKZ,UAAU,QACb,uBACEa,MAAO,CACL,CAAEV,MAAOK,YAAT,QAAuBM,IAAK,KAC5B,CACEX,MAAOK,YADT,mBAEEM,IAAKN,YAAK,oBAEZG,EAPJ,MASEF,QAAQ,aAGZ,yBAAKT,UAAU,QACb,2BAAWW,EAff,OAiBE,uCACGA,EADH,sCACG,EADH,8BACG,OACC,YAA2C,IAAxCI,EAAwC,EAAxCA,GAAIZ,EAAoC,EAApCA,MAAOa,EAA6B,EAA7BA,iBAAkBC,EAAW,EAAXA,KAC9B,OACE,qBACEd,MADF,EAEEC,YAFF,EAGEc,IAAG,kBAHL,EAIEb,KAAMY,aAAF,EAAEA,EAAME,eAYvB,e,mJCpCDC,EAAuB,SAACX,GAC5B,OAAOY,IAAW,aAAcC,IAAf,oBAA4C,CAC3D,sBAAmC,YAAZb,KAqC3B,EAjCqC,SAAC,GAAkC,IAAhCI,EAAgC,EAAhCA,MAAgC,IAAzBJ,eAAyB,MAAf,SAAe,EAChEc,EAAiB,SAACC,GAA0B,MAChD,OAAOH,IAAW,mBAAoBC,IAArB,uBACdA,IADc,sBACiBE,IAAUX,SAD3B,EAAjB,KAKF,OACE,yBAAKb,UAAL,cAA6ByB,aAAW,cACtC,wBAAIzB,UAAWoB,EAAqBX,IACjCI,EAAA,KAAU,cACT,OACE,wBACEK,IAAG,mBADL,EAEElB,UAAWuB,EAAeC,IAxBtB,SAACE,GACjB,gBAAQA,EAAD,MAyBMC,CAAA,GACC,uBACErB,GAAIoB,EADN,IAEE1B,UAFF,mBAGE4B,MAAOF,EAAKvB,QAGd,0BAAMH,UAAU,oBAZtB,W,uBCnCVH,EAAOC,QAAU,CAAC,SAAW,qC,qBCA7BD,EAAOC,QAAU,CAAC,oBAAsB,gDAAgD,eAAiB,2CAA2C,qBAAuB,mD,uICGrK+B,EAAW,SAACpB,EAAD,GAA8D,QAC7E,OAAOY,IACL,CAAES,IAAiB,gBAAZrB,GACP,CAAE,cAA2B,cAAZA,GACjB,CAAE,sBAAmC,YAAZA,GACzB,CAAE,mBAAgC,kBAAZA,GACtB,CAAE,qBAAkC,mBAAZA,GACxB,CAAE,aAA0B,WAAZA,GAChB,CAAE,aAA0B,kBAAZA,GAChB,CAAE,gBAA6B,cAAZA,KARJ,MASZR,IATY,+BASWQ,EATX,gBAAjB,KAsEF,EApCiC,SAAC,GAS5B,IARJA,EAQI,EARJA,QACAsB,EAOI,EAPJA,QACAxB,EAMI,EANJA,KAMI,IALJyB,YAKI,MALG,GAKH,EAJJhC,EAII,EAJJA,UAII,IAHJiC,gBAGI,SAFJC,EAEI,EAFJA,KAEI,IADJC,iBACI,MADQ,GACR,EACJ,MAAIH,QAAJ,EAcE,4BACEI,KADF,SAEEpC,UAAW6B,EAASpB,EAFtB,GAGEsB,QAASA,GAHX,KAIEE,SAAUA,GAJZ,EADF,GAXI,uBACED,KADF,EAEE7B,MAFF,EAGEH,UAAW6B,EAASpB,EAHtB,GAIE4B,cAAY,eALhB","file":"component---src-templates-situations-list-tsx-bfbb9c878bc8c4a71b8d.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn-small-black\":\"variants-module--btn-small-black--398fP\",\"btnSmallBlack\":\"variants-module--btn-small-black--398fP\"};","import React from 'react';\n\nimport styles from './headline.module.scss';\n\nconst Headline: React.FC = ({ children }) => {\n  return <h1 className={styles.headline}>{children}</h1>;\n};\n\nexport default Headline;\n","import React from 'react';\nimport Link from '@/components/link';\nimport Button from '@/components/button';\nimport I18n from '@/components/i18n';\n\ninterface IProps {\n  title: string;\n  link: string;\n  description: string;\n}\n\nconst ListCard: React.FC<IProps> = ({ title, description, link }) => (\n  <div className=\"card p-2 mb-2\">\n    <h2 className=\"font-weight-medium mb-1\">{title}</h2>\n    <div className=\"d-flex justify-content-between align-items-end\">\n      <p className=\"m-0\">{description}</p>\n      <div>\n        <Link to={link}>\n          <Button text={I18n('detail')} variant=\"outline\" />\n        </Link>\n      </div>\n    </div>\n  </div>\n);\n\nexport default ListCard;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { IQuery } from 'graphql-types';\nimport Container from '@/components/container';\nimport Headline from '@/components/headline';\nimport ListCard from '@/components/list-card';\nimport Layout from '@/layouts/default-layout';\nimport Breadcrumb from '@/components/breadcrumb';\nimport I18n from '@/components/i18n';\n\ninterface IProps {\n  data: IQuery;\n}\n\nconst Home: React.FC<IProps> = ({ data }) => {\n  const { area } = data;\n  return (\n    <Layout>\n      <Container>\n        <div className=\"pt-1\">\n          <Breadcrumb\n            items={[\n              { title: I18n('home'), url: '/' },\n              {\n                title: I18n('life_situations'),\n                url: I18n('slug_situations'),\n              },\n              area.name,\n            ]}\n            variant=\"inverse\"\n          />\n        </div>\n        <div className=\"mt-3\">\n          <Headline>{area.name}</Headline>\n        </div>\n        <div>\n          {area.relationships?.situation?.map(\n            ({ id, title, meta_description, path }) => {\n              return (\n                <ListCard\n                  title={title}\n                  description={meta_description}\n                  key={`area-list-item-${id}`}\n                  link={path?.alias}\n                />\n              );\n            },\n          )}\n        </div>\n      </Container>\n    </Layout>\n  );\n};\nexport default Home;\n\nexport const query = graphql`\n  query($slug: String!) {\n    area(path: { alias: { eq: $slug } }) {\n      name\n      relationships {\n        situation {\n          id\n          title\n          meta_description\n          path {\n            alias\n          }\n        }\n      }\n    }\n  }\n`;\n","import classNames from 'classnames';\nimport React from 'react';\nimport Link from '../link';\nimport classes from './breadcrumb.module.scss';\n\ninterface INavItem {\n  title: string;\n  url: string;\n}\n\ninterface IProps {\n  items: (string | INavItem)[];\n  variant?: 'normal' | 'inverse';\n}\n\nconst isNavItem = (item: any): item is INavItem => {\n  return (item as INavItem).title !== undefined;\n};\n\nconst getBreadcrumbClasses = (variant: IProps['variant']): string => {\n  return classNames('breadcrumb', classes.breadcrumbContainer, {\n    'breadcrumb--inverse': variant === 'inverse',\n  });\n};\n\nconst Breadcrumb: React.FC<IProps> = ({ items, variant = 'normal' }) => {\n  const getItemClasses = (index: number): string => {\n    return classNames('breadcrumb__item', classes.breadcrumbItem, {\n      [classes.breadcrumbItemActive]: index === items.length - 1,\n    });\n  };\n\n  return (\n    <nav className=\"breadcrumbs\" aria-label=\"breadcrumb\">\n      <ol className={getBreadcrumbClasses(variant)}>\n        {items.map((item, index) => {\n          return (\n            <li\n              key={`breadcrumb-item-${index}`}\n              className={getItemClasses(index)}\n            >\n              {isNavItem(item) ? (\n                <Link\n                  to={item.url}\n                  className=\"breadcrumb__link\"\n                  label={item.title}\n                />\n              ) : (\n                <span className=\"breadcrumb__link\">{item}</span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n};\n\nexport default Breadcrumb;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"headline-module--headline--2EZlD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"breadcrumbContainer\":\"breadcrumb-module--breadcrumbContainer--aIVuB\",\"breadcrumbItem\":\"breadcrumb-module--breadcrumbItem--3jBwP\",\"breadcrumbItemActive\":\"breadcrumb-module--breadcrumbItemActive--6MwJy\"};","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './variants.module.scss';\n\nconst getClass = (variant: ButtonVariant, additionalClass?: string): string => {\n  return classNames(\n    { btn: variant !== 'small-black' },\n    { 'btn-primary': variant === 'contained' },\n    { 'btn-outline-primary': variant === 'outline' },\n    { 'btn-outline-dark': variant === 'outline-black' },\n    { 'btn-outline-yellow': variant === 'outline-yellow' },\n    { 'btn-yellow': variant === 'yellow' },\n    { 'text-black': variant === 'outline-black' },\n    { 'btn-secondary': variant === 'secondary' },\n    { [styles.btnSmallBlack]: variant === 'small-black' },\n    { [additionalClass]: additionalClass },\n  );\n};\n\nexport type ButtonVariant =\n  | 'contained'\n  | 'outline'\n  | 'yellow'\n  | 'secondary'\n  | 'outline-black'\n  | 'outline-yellow'\n  | 'small-black';\n\ninterface IProps {\n  text?: string;\n  variant?: ButtonVariant;\n  className?: string;\n  onClick?: () => void;\n  href?: string;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  linkTitle?: string;\n}\n\nconst Button: React.FC<IProps> = ({\n  variant,\n  onClick,\n  text,\n  href = '',\n  className,\n  disabled = false,\n  icon,\n  linkTitle = '',\n}) => {\n  if (href !== '' && !disabled) {\n    return (\n      <a\n        href={href}\n        title={linkTitle}\n        className={getClass(variant, className)}\n        data-testid=\"button-link\"\n      >\n        {text}\n      </a>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={getClass(variant, className)}\n      onClick={onClick || null}\n      disabled={disabled}\n    >\n      {text}\n      {icon}\n    </button>\n  );\n};\n\nexport default Button;\n"],"sourceRoot":""}